#+author: Martin Lönn Andersson
#+title: Emacs Configuration
#+property: header-args:emacs-lisp :lexical t :tangle ./init.el

* Contents :toc@5@gh:
- [[#preamble][Preamble]]
- [[#startup][Startup]]
  - [[#early-init][Early Init]]
    - [[#defer-garbage-collection][Defer Garbage Collection]]
    - [[#disable-package-enable-at-startup][Disable =package-enable-at-startup=]]
    - [[#unset-file-name-handler-alist][Unset =file-name-handler-alist=]]
    - [[#hide-ui-elements][Hide UI Elements]]
    - [[#suppress-warnings-buffer][Suppress Warnings Buffer]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#define-constants][Define Constants]]
  - [[#os-specific-adaptions][OS-specific Adaptions]]
    - [[#linux][Linux]]
    - [[#mac][Mac]]
  - [[#load-path][Load Path]]
  - [[#custom-file][Custom File]]
  - [[#backup-directory][Backup Directory]]
- [[#package-management][Package Management]]
  - [[#package-archives--initialize-package-manager][Package Archives & Initialize Package Manager]]
  - [[#use-package][use-package]]
- [[#general-configurations][General Configurations]]
  - [[#user-information][User Information]]
  - [[#quality-of-life][Quality of Life]]
    - [[#miscellaneous-options][Miscellaneous Options]]
    - [[#completions][Completions]]
    - [[#history][History]]
    - [[#environment-variables][Environment Variables]]
    - [[#sudo-edit][Sudo Edit]]
  - [[#embark][Embark]]
  - [[#dotfiles-management][Dotfiles Management]]
  - [[#file-explorer][File Explorer]]
  - [[#terminal-emulation][Terminal Emulation]]
  - [[#popup-buffers][Popup Buffers]]
- [[#appearance][Appearance]]
  - [[#general-appearance-settings][General Appearance Settings]]
  - [[#font--icons][Font & Icons]]
  - [[#themes][Themes]]
- [[#text--languages][Text & Languages]]
  - [[#wrap-text][Wrap Text]]
  - [[#spell-checking][Spell Checking]]
  - [[#undo-functionality][Undo Functionality]]
  - [[#tabs][Tabs]]
- [[#keybindings][Keybindings]]
  - [[#general][General]]
  - [[#vi-emulation][Vi Emulation]]
  - [[#hydra][Hydra]]
    - [[#basic-configuration][Basic Configuration]]
    - [[#choose-theme][Choose Theme]]
    - [[#resize-window][Resize Window]]
    - [[#eglot-commands][Eglot Commands]]
- [[#help-functionality][Help Functionality]]
  - [[#helpful][Helpful]]
  - [[#which-key][Which Key]]
- [[#programming][Programming]]
  - [[#general-programming-functionalities][General Programming Functionalities]]
    - [[#eglot][Eglot]]
    - [[#treesitter][Treesitter]]
    - [[#completions-1][Completions]]
    - [[#comments][Comments]]
    - [[#match-delimiters][Match Delimiters]]
    - [[#git-interface][Git Interface]]
  - [[#programming-languages-support][Programming Languages Support]]
    - [[#java][Java]]
    - [[#common-file-types][Common File Types]]
- [[#productivity][Productivity]]
  - [[#org-mode][Org Mode]]
    - [[#basic-configuration-1][Basic Configuration]]
    - [[#org-agenda][Org Agenda]]
      - [[#basic-configuration-2][Basic Configuration]]
      - [[#org-super-agenda][Org Super Agenda]]
    - [[#org-capture][Org Capture]]
    - [[#org-contacts][Org Contacts]]
    - [[#org-babel][Org Babel]]
  - [[#mail][Mail]]
  - [[#calendar][Calendar]]
  - [[#latex][LaTeX]]
  - [[#pdf-tools][PDF Tools]]
- [[#diminish][Diminish]]
- [[#success-notification][Success Notification]]
- [[#tangle--reload-on-save][Tangle & Reload On Save]]

* Preamble

Welcome to my Emacs configuration. This is a literate configuration, meaning code and prose are intertwined in order to provide clear documentation. [[https://orgmode.org/worg/org-contrib/babel/][Org Babel]] makes this possible in =.org= files, like this one.

Inspirations:
- [[https://github.com/MatthewZMD/.emacs.d][Matthew Zeng's Emacs setup]]
- [[https://codeberg.org/ashton314/emacs-bedrock][emacs-bedrock]]
- [[https://github.com/daviwil/emacs-from-scratch][Emacs From Scratch]]

* Startup
** Early Init
*** Defer Garbage Collection

Increase garbage collection memory threshold as early as possible to speed up startup.

#+begin_src emacs-lisp :tangle ./early-init.el

(setq gc-cons-threshold 100000000)

#+end_src

*** Disable =package-enable-at-startup=

Package initialize occurs automatically, before =user-init-file= is loaded, but after =early-init-file=. We handle package initialization, so we must prevent Emacs from doing it early.

#+begin_src emacs-lisp :tangle ./early-init.el

(setq package-enable-at-startup nil)

#+end_src

*** Unset =file-name-handler-alist=

Every file opened and loaded by Emacs will run through this list to check for a proper handler for the file, but during startup, it won’t need any of them.

#+begin_src emacs-lisp :tangle ./early-init.el

(defvar file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)

;; Restore original file-name-handler-alist after initialization
(add-hook 'after-init-hook
          (lambda ()
            (setq file-name-handler-alist file-name-handler-alist-original)))

#+end_src

*** Hide UI Elements

Disable them here before they've been initialized.

#+begin_src emacs-lisp :tangle ./early-init.el

(setq initial-scratch-message nil)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(blink-cursor-mode -1)

#+end_src

*** Suppress Warnings Buffer

The =*Warnings*= buffer sometimes pops up unnecessarily and intrusively, so I increase the severity level for warnings to errors.

#+begin_src emacs-lisp :tangle ./early-init.el

(setq warning-minimum-level :error)
(setq byte-compile-warnings '(not obsolete))
(setq warning-suppress-log-types '((comp) (bytecomp)))
(setq native-comp-async-report-warnings-errors 'silent)

#+end_src

** Garbage Collection

A large =gc-cons-threshold= may cause freezing and stuttering during long-term interactive use.

If you experience freezing, decrease this amount, if you experience stuttering, increase this amount.

#+begin_src emacs-lisp

(defvar better-gc-cons-threshold 4294967269 ; 512mb
  "The default value to use for `gc-cons-threshold'.

  If you experience freezing, decrease this.  If you experience stuttering, increase this.")

(add-hook 'emacs-startup-hook
          (lambda () (setq gc-cons-threshold better-gc-cons-threshold)))

#+end_src

Garbage Collect when Emacs is out of focus and avoid garbage collection when using minibuffer.

#+begin_src emacs-lisp

(add-hook 'emacs-startup-hook
          (lambda ()
            (if (boundp 'after-focus-change-function)
                (add-function :after after-focus-change-function
                              (lambda ()
                                (unless (frame-focus-state)
                                  (garbage-collect))))
              (add-hook 'after-focus-change-function 'garbage-collect))
            (defun gc-minibuffer-setup-hook ()
              (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

            (defun gc-minibuffer-exit-hook ()
              (garbage-collect)
              (setq gc-cons-threshold better-gc-cons-threshold))

            (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
            (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))

#+end_src

** Define Constants

These constants are used below for OS-specific settings.

#+begin_src emacs-lisp

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst *sys/mac*
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

#+end_src

** OS-specific Adaptions
*** Linux

Set super key to meta on Linux.

#+begin_src emacs-lisp

(when *sys/linux*
  (setq x-super-keysym 'meta)
  (add-to-list 'default-frame-alist '(undecorated . t)))

#+end_src

*** Mac

Set meta key, turn off option key as modifier, set dired to not use ~--dired~ flag with ~ls~ on macOS.

#+begin_src emacs-lisp

(when *sys/mac*
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'none)
  (setq frame-resize-pixelwise t)
  ;; (add-to-list 'default-frame-alist '(undecorated . t))
  (global-set-key (kbd "C-x C-z") 'ns-do-hide-emacs)
  ;; Start server if it isn't running
  (load "server")
  (unless (server-running-p)
    (server-start)))

#+end_src

** Load Path

Set load path to include =./elisp= folder.

#+begin_src emacs-lisp

(defun update-to-load-path (folder)
  "Update FOLDER and its subdirectories to `load-path'."
  (let ((base folder))
    (unless (member base load-path)
      (add-to-list 'load-path base))
    (dolist (f (directory-files base))
      (let ((name (concat base "/" f)))
        (when (and (file-directory-p name)
                   (not (equal f ".."))
                   (not (equal f ".")))
          (unless (member base load-path)
            (add-to-list 'load-path name)))))))

(update-to-load-path (expand-file-name "elisp" user-emacs-directory))

#+end_src

** Custom File

Customize-based settings should live in =custom.el= file.

#+begin_src emacs-lisp

(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)

#+end_src

** Backup Directory

Set backup directory location.

#+begin_src emacs-lisp

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

#+end_src

* Package Management
** Package Archives & Initialize Package Manager

Set package archives and initialize the package manager.

#+begin_src emacs-lisp

(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("elpa" . "https://elpa.gnu.org/packages/")
        ("nongnu" . "https://elpa.nongnu.org/nongnu/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")
        ("gnu-devel" . "https://elpa.gnu.org/devel/")
        ("nongnu-devel" . "https://elpa.nongnu.org/nongnu-devel/")))

(package-initialize)

#+end_src

** use-package

A nicer way to set up packages is with [[https://github.com/jwiegley/use-package][use-package]]. Make sure =use-package= is installed, refresh package contents, always ensure packages are installed and turn on verbose logging.

#+begin_src emacs-lisp

;; Ensure use-package is installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
(setq
 use-package-always-ensure t
 use-package-verbose t)

#+end_src

* General Configurations
** User Information

Set name and email address.

#+begin_src emacs-lisp

(setq user-full-name "Martin Lönn Andersson")
(setq user-mail-address "mlonna@pm.me")

#+end_src

** Quality of Life
*** Miscellaneous Options

A collection of settings I did not know where else to put.

#+begin_src emacs-lisp

;; Increase large file warning threshold
(setq large-file-warning-threshold 100000000)

;; Set language environment
(set-language-environment "UTF-8")

;; Clean up unneccesary whitespace on save
(add-hook 'before-save-hook 'whitespace-cleanup)

;; Map yes and no to y and n
(fset 'yes-or-no-p 'y-or-n-p)

;; Disable visual and audible bell
(setq ring-bell-function 'ignore)

;; Suppress auto revert messages
(setq auto-revert-verbose nil)

;; Automatically kill all active processes when closing Emacs
(setq confirm-kill-processes nil)

;; Add a newline automatically at the end of the file upon save
(setq require-final-newline t)

;; Set default browser
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "qutebrowser")

;; Make switching buffers more consistent
(setopt switch-to-buffer-obey-display-actions t)

;; Smooth scrolling
(setq scroll-step 1
      scroll-margin 1
      scroll-conservatively 101
      scroll-up-aggressively 0.01
      scroll-down-aggressively 0.01
      auto-window-vscroll nil
      fast-but-imprecise-scrolling nil
      mouse-wheel-scroll-amount '(1 ((shift) . 1))
      mouse-wheel-progressive-speed nil
      hscroll-step 1
      hscroll-margin 1)

;; Don't open a new window for ediff
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

;; Automatically switch focus to new window when it is created
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

#+end_src

*** Completions

[[https://github.com/minad/vertico][Vertico]] provides a performant and minimalistic vertical completion UI.

[[https://github.com/minad/consult][Consult]] provides search and navigation commands based on the Emacs
completion function completing-read.

#+begin_src emacs-lisp

(use-package vertico
  :init
  (vertico-mode))

(use-package consult
  :config
  (global-set-key [remap switch-to-buffer] 'consult-buffer)
  (global-set-key [remap switch-to-buffer-other-window] 'consult-buffer-other-window)
  (global-set-key [remap switch-to-buffer-other-frame] 'consult-buffer-other-frame)
  (global-set-key [remap goto-line] 'consult-goto-line))

;; Better completion style
(use-package orderless
  :config
  (setq completion-styles '(orderless)))

;; Annotations for the minibuffer
(use-package marginalia
  :config
  (marginalia-mode 1))

#+end_src

*** History

#+begin_src emacs-lisp

;; Save text entered in minibuffer prompts
(setq history-length 25)
(savehist-mode 1)

;; Remember recently edited files
(recentf-mode 1)

;; Automatically reread files when changed
(setopt auto-revert-avoid-polling t)
(setopt auto-revert-interval 5)
(setopt auto-revert-check-vc-info t)
(global-auto-revert-mode t)

;; Auto reload non-file buffers
(setq global-auto-revert-non-file-buffers t)

#+end_src

*** Environment Variables

Get environment variables from your shell with [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]].

#+begin_src emacs-lisp

(use-package exec-path-from-shell
  :config
  ;; Don't start an interactive shell (improves startup time)
  (setq exec-path-from-shell-arguments nil)
  ;; Which environment variables to import
  (dolist (var '("LANG" "LC_ALL"))
    (add-to-list 'exec-path-from-shell-variables var))
  (exec-path-from-shell-initialize))

#+end_src

*** Sudo Edit

Edit files with sudo privileges with [[https://github.com/nflath/sudo-edit/tree/74eb1e6986461baed9a9269566ff838530b4379b][sudo-edit]].

#+begin_src emacs-lisp

(use-package sudo-edit
  :defer t
  :diminish
  :config
  (global-set-key (kbd "C-c C-r") 'sudo-edit))

#+end_src

** Embark

[[https://github.com/oantolin/embark/][Embark]] provides commands to run based on the current context.

#+begin_src emacs-lisp

(use-package embark
  :bind ("M-;" . embark-act))

(use-package embark-consult
  :after embark
  :hook (embark-collect-mode-hook . embark-consult-preview-minor-mode))

#+end_src

** Dotfiles Management

I manage my dotfiles with [[https://github.com/tuh8888/chezmoi.el][chezmoi]], and the [[https://github.com/tuh8888/chezmoi.el][chezmoi Emacs package]] provides some useful functions for this.

#+begin_src emacs-lisp

(use-package chezmoi
  :bind (("C-c C s" . chezmoi-write)
         ("C-c C f" . chezmoi-find))
  :config
  ;; (require 'chezmoi-cape)
  )

#+end_src

** File Explorer

Dired, Emacs' built-in file explorer, with vim-style navigation and nerd icons.

#+begin_src emacs-lisp

(use-package dired
  :ensure nil
  :hook (dired-mode . (lambda ()
                        (dired-hide-details-mode) ; Hide details by default
                        (dired-omit-mode)))       ; Hide hidden files
  :bind (("C-x C-j" . dired-jump)
         :map evil-normal-state-map
         ("z d" . dired-hide-details-mode)        ; Toggle details
         ("z h" . dired-omit-mode))               ; Toggle details
  :custom
  (dired-free-space nil)                          ; Hide free space
  (dired-omit-verbose nil)                        ; Hide message when omitting files
  :config
  (when *sys/mac*
    ;; Set directory program to gls on macOS
    ;; since flag --group-directories-first
    ;; doesn't exist on macOS' stock ls
    (setq insert-directory-program "gls")
    ;; Don't use --dired flag with ls on macOS
    (setq dired-use-ls-dired nil))

  ;; Show hidden files, sort directories first
  (setq dired-listing-switches "-la --group-directories-first -v")

  ;; What files to hide in dired-omit-mode
  (setq dired-omit-files
        (rx (or (seq bol (? ".") "#")         ; emacs autosave files
                (seq bol "." (not (any "."))) ; dot-files
                (seq "~" eol)                 ; backup-files
                )))

  ;; No infinite dired buffers!
  (setq dired-kill-when-opening-new-dired-buffer t))

;; Use nerd icons in dired
(use-package nerd-icons-dired
  :diminish
  :hook (dired-mode . nerd-icons-dired-mode))

#+end_src

** Terminal Emulation

A better terminal emulation with [[https://github.com/akermu/emacs-libvterm][vterm]], plus multiple vterm buffers with [[https://github.com/suonlight/multi-vterm][multi-vterm]].

#+begin_src emacs-lisp

(use-package vterm
  :custom
  (term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  (vterm-shell "zsh")
  (vterm-max-scrollback 10000))

;; Open multiple vterm buffers
(use-package multi-vterm
  :bind
  ("C-c t" . multi-vterm-dedicated-toggle)
  ("C-c C-t" . multi-vterm)
  :config
  ;; Dedicated terminal height
  (setq multi-vterm-dedicated-window-height-percent 30)
  (add-hook 'vterm-mode-hook
            (lambda ()
              (setq-local evil-insert-state-cursor 'box)
              (evil-insert-state))))

#+end_src

** Popup Buffers

Popup buffers with [[https://github.com/karthink/popper][popper]].

#+begin_src emacs-lisp

(use-package popper
  :bind
  ("C-0"   . popper-toggle)
  ("M-p"   . popper-cycle)
  ("C-M-0" . popper-toggle-type)
  ("C-c d" . popper-kill-latest-popup)
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "\\*Warnings\\*"
          "\\*Compile-Log\\*"
          "^\\*compilation.*\\*$"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          "^\\*tex-shell.*\\*$"
          "^\\*Flycheck.*\\*$"
          "^\\*Buffer List*\\*$"
          "^\\*LSP Error List*\\*$"
          magit-mode
          comint-mode
          eshell-mode
          shell-mode
          term-mode
          vterm-mode
          ansi-term-mode
          help-mode
          helpful-mode
          compilation-mode))
  :config
  (setq popper-mode-line " POP " ; Let it breathe a bit
        popper-window-height 15
        popper-group-function #'popper-group-by-directory)
  (popper-mode 1)
  (popper-echo-mode 1))

#+end_src

* Appearance
** General Appearance Settings

#+begin_src emacs-lisp

;; Display right and left fringe
(fringe-mode '(8 . 8))

;; Turn off blinking cursor
(blink-cursor-mode 0)

;; Show column number in status bar
(column-number-mode)

;; Disable border around modelines
(custom-set-faces
 '(mode-line ((t (:box nil))))
 '(mode-line-inactive ((t (:box nil)))))

;; Make line numbers relative
(setq display-line-numbers-type 'relative
      display-line-numbers-width-start t)

;; Display relative line numbers in the below modes
(dolist (hook '(fundamental-mode conf-mode-hook prog-mode-hook text-mode-hook markdown-mode-hook org-mode-hook))
  (add-hook hook 'display-line-numbers-mode))

;; Highlight current line
(let ((hl-line-hooks '(text-mode-hook prog-mode-hook dired-mode-hook Man-mode-hook conf-mode-hook)))
  (mapc (lambda (hook) (add-hook hook 'hl-line-mode)) hl-line-hooks))

;; Make keybindings in minibuffer look like other text
(set-face-attribute 'help-key-binding nil
                    :box nil
                    :foreground "unspecified"
                    :background "unspecified"
                    :inherit nil)

#+end_src

** Font & Icons

#+begin_src emacs-lisp

(when *sys/linux*
  (add-to-list 'default-frame-alist '(font . "Terminus (TTF)-11")))

(when *sys/mac*
  (add-to-list 'default-frame-alist '(font . "Terminus (TTF)-18")))

#+end_src

Install nerd icons with =M-x nerd-icons-install-fonts=.

#+begin_src emacs-lisp

(use-package nerd-icons)

;; Use nerd icons in ibuffer
(use-package nerd-icons-ibuffer
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

#+end_src

** Themes

#+begin_src emacs-lisp

(use-package modus-themes
  :defer t)

(use-package standard-themes
  :defer t)

(use-package ef-themes
  :defer t)

#+end_src

* Text & Languages
** Wrap Text

Wrap long lines softly.

#+begin_src emacs-lisp

(global-visual-line-mode 1)

#+end_src

** Spell Checking

To spell check files, I use =flyspell= and =hunspell= in order to spell check in both Swedish and English.

#+begin_src emacs-lisp

(use-package jinx
  :diminish
  :hook (((markdown-mode org-mode text-mode) . jinx-mode))
  :bind ("C-c s" . jinx-correct)
  :config
  (setq jinx-languages "sv en_US"))

#+end_src

** Undo Functionality

[[https://github.com/casouri/vundo][vundo]] visualizes undo history in a tree view.

#+begin_src emacs-lisp

(use-package vundo)

#+end_src

** Tabs

Tabs are four spaces.

#+begin_src emacs-lisp

(setq-default tab-width 4 indent-tabs-mode nil)

#+end_src

* Keybindings
** General

An easier way to set keybindings is with [[https://github.com/noctuid/general.el][general]].

#+begin_src emacs-lisp

(use-package general
  :config

  ;; Open Hydra main menu
  (general-define-key
   :keymaps '(normal visual emacs)
   "," 'hydra-main/body)

  ;; Make <escape> quit prompts
  (general-define-key
   "<escape>" 'keyboard-escape-quit)

  ;; Increase/decrease text size
  (general-define-key
   "C-=" #'text-scale-increase
   "C-+" #'text-scale-increase
   "C--" #'text-scale-decrease))

#+end_src

** Vi Emulation

[[https://github.com/emacs-evil/evil][Evil]] provides Vi emulation for Emacs, as well as surround functionality with [[https://github.com/emacs-evil/evil-surround][evil-surround]].

#+begin_src emacs-lisp

(use-package evil
  :diminish
  :demand t
  :bind
  ("C-z" . evil-local-mode) ; Toggle evil mode

  ;; Window navigation
  (:map evil-normal-state-map
        ("C-w h" . evil-window-left)
        ("C-w j" . evil-window-down)
        ("C-w k" . evil-window-up)
        ("C-w l" . evil-window-right))

  :hook (evil-mode . my/evil-hook)

  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-want-C-u-scroll t
        evil-want-C-i-jump nil)

  :config
  (evil-set-undo-system 'undo-redo)

  ;; Modes to disable evil in
  (defun my/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    term-mode
                    vterm-mode
                    ansi-term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  ;; Turn on evil mode
  (evil-mode 1)

  ;; Move on visual lines unless a count is involved
  (with-eval-after-load 'evil
    (evil-define-motion evil-next-line (count)
      "Move the cursor COUNT screen lines down."
      :type line
      (let ((line-move-visual (unless count t)))
        (evil-line-move (or count 1))))

    (evil-define-motion evil-previous-line (count)
      "Move the cursor COUNT lines up."
      :type line
      (let ((line-move-visual (unless count t)))
        (evil-line-move (- (or count 1))))))

  :custom
  ;; Horizontal movement crosses lines
  (evil-cross-lines t))

;; More vim keybindings (in non-file buffers)
(use-package evil-collection
  :after evil
  :diminish evil-collection-unimpaired-mode
  :config
  (evil-collection-init)
  ;; vim-style navigation in dired
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-up-directory
    "l" 'dired-find-file))

;; Even more vim keybindings (adds surround functionality)
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))

;; Enable camelCase motion
(use-package evil-little-word
  :ensure nil
  :config
  (define-key evil-normal-state-map    (kbd "w")   'evil-forward-little-word-begin)
  (define-key evil-normal-state-map    (kbd "b")   'evil-backward-little-word-begin)
  (define-key evil-operator-state-map  (kbd "w")   'evil-forward-little-word-begin)
  (define-key evil-operator-state-map  (kbd "b")   'evil-backward-little-word-begin)
  (define-key evil-visual-state-map    (kbd "w")   'evil-forward-little-word-begin)
  (define-key evil-visual-state-map    (kbd "b")   'evil-backward-little-word-begin)
  (define-key evil-visual-state-map    (kbd "i w") 'evil-inner-little-word))

;; vim keybindings for org mode
(use-package evil-org
  :after org
  :hook (org-mode . evil-org-mode)
  :diminish
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

#+end_src

** Hydra

[[https://github.com/abo-abo/hydra][Hydra]] provides temporary command buffers.

*** Basic Configuration

#+begin_src emacs-lisp

(use-package hydra
  :config

  (defhydra hydra-main (:timeout 4)
    "
  Main Menu
  -----------------------------
  [_t_] Choose Theme
  [_r_] Resize Window
  [_c_] Open Calendar
  [_e_] Eglot Commands
  [_q_] Quit"
    ("t" hydra-theme/body nil :exit t)
    ("r" hydra-window/body nil :exit t)
    ("c" my/custom-open-calendar nil :exit t)
    ("e" hydra-eglot/body nil :exit t)
    ("q" nil nil :exit t)))

#+end_src

*** Choose Theme

Open a temporary buffer to choose a new theme (and disable all other themes).

#+begin_src emacs-lisp

(defhydra hydra-theme (:timeout 4)
  "
  Choose theme
  -----------------------------
  [_l_] Standard Light
  [_e_] EF Melissa Light
  [_v_] Modus Vivendi
  [_q_] Quit"
  ("l" (my/enable-theme 'standard-light) nil)
  ("e" (my/enable-theme 'ef-melissa-light) nil)
  ("v" (my/enable-theme 'modus-vivendi) nil)
  ("q" nil nil :exit t))

(defun my/disable-all-themes ()
  "Disable all active themes."
  (dolist (theme custom-enabled-themes)
    (disable-theme theme)))

(defun my/enable-theme (theme)
  "Enable the specified THEME and disable all other themes."
  (my/disable-all-themes)
  (load-theme theme t)
  (customize-save-variable 'my-chosen-theme theme))

(defun my/enable-theme-interactive (theme)
  "Interactively enable the specified THEME and disable all other themes."
  (interactive
   (list (completing-read "Choose theme: " (mapcar #'symbol-name (custom-available-themes)))))
  (my/disable-all-themes)
  (load-theme (intern theme) t)
  (customize-save-variable 'my-chosen-theme theme))

;; Remember last used theme between sessions
(add-hook 'after-init-hook
          (lambda ()
            (if (boundp 'my-chosen-theme)
                (my/enable-theme my-chosen-theme)
              (my/enable-theme 'modus-vivendi))))

#+end_src

*** Resize Window

Open a temporary buffer to resize the current window.

#+begin_src emacs-lisp

(defhydra hydra-window (:timeout 4)
  "
  Resize window
  -----------------------------
  [_h_] Decrease width
  [_j_] Increase height
  [_k_] Decrease height
  [_l_] Increase width
  [_q_] Quit"
  ("h" (window-width-decrease)  nil)
  ("j" (window-height-increase) nil)
  ("k" (window-height-decrease) nil)
  ("l" (window-width-increase)  nil)
  ("q" nil nil :exit t))

;; Resizes the window width based on the input
(defun resize-window-width (w)
  "Resizes the window width based on W."
  (interactive (list (if (> (count-windows) 1)
                         (read-number "Set the current window width in [1~9]x10%: ")
                       (error "You need more than 1 window to execute this function!")))
               (message "%s" w)
               (window-resize nil (- (truncate (* (/ w 10.0) (frame-width))) (window-total-width)) t)))

;; Resizes the window height based on the input
(defun resize-window-height (h)
  "Resizes the window height based on H."
  (interactive (list (if (> (count-windows) 1)
                         (read-number "Set the current window height in [1~9]x10%: ")
                       (error "You need more than 1 window to execute this function!")))
               (message "%s" h)
               (window-resize nil (- (truncate (* (/ h 10.0) (frame-height))) (window-total-height)) nil)))

(defun resize-window (width delta)
  "Resize the current window's size.  If WIDTH is non-nil, resize width by some DELTA."
  (if (> (count-windows) 1)
      (window-resize nil delta width)
    (error "You need more than 1 window to execute this function!")))

;; Shorcuts for window resize width and height
(defun window-width-increase ()
  (interactive)
  (resize-window t 5))

(defun window-width-decrease ()
  (interactive)
  (resize-window t -5))

(defun window-height-increase ()
  (interactive)
  (resize-window nil 5))

(defun window-height-decrease ()
  (interactive)
  (resize-window nil -5))

#+end_src

*** Eglot Commands

Open a temporary buffer to run Eglot commands.

#+begin_src emacs-lisp

(defhydra hydra-eglot (:exit t :timeout 4)
  "
  ^Buffer^               ^Server^           ^Symbol^
  ^^^^^^----------------------------------------------------------
  [_f_] Format buffer    [_c_] Reconnect    [_r_] Rename symbol
  [_a_] Code actions     ^ ^                [_d_] Definition
                         ^ ^ ^ ^            [_i_] Implementation
                         ^ ^ ^ ^            [_t_] Type definition
  [_q_] Quit"
  ("c" eglot-reconnect nil)
  ("f" eglot-format nil)
  ("r" eglot-rename nil)
  ("a" eglot-code-actions nil)
  ("d" eglot-find-declaration nil)
  ("i" eglot-find-implementation nil)
  ("t" eglot-find-typeDefinition nil)
  ("q" nil nil :exit t))

#+end_src

* Help Functionality
** Helpful

A more detailed help buffer with [[https://github.com/Wilfred/helpful][helpful]].

#+begin_src emacs-lisp

(use-package helpful
  :config
  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  (global-set-key (kbd "C-h f") #'helpful-callable)

  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-h x") #'helpful-command))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][Which Key]] displays available keybindings in a popup buffer.

#+begin_src emacs-lisp

;; Display help for next command keystroke
(use-package which-key
  :diminish
  :config (which-key-mode 1))

#+end_src

* Programming
** General Programming Functionalities
*** Eglot

Eglot: the built-in LSP client for Emacs.

#+begin_src emacs-lisp

(use-package eglot
  :ensure nil
  :hook
  ((python-ts-mode java-ts-mode tex-mode) . eglot-ensure)
  :custom
  (eglot-send-changes-idle-time 0.1)
  (eglot-extend-to-xref t)             ; activate Eglot in referenced non-project files

  (eglot-events-buffer-size 0)         ; No event buffers (Lsp server logs)
  (eglot-autoshutdown t)               ; Shut down unused servers.
  (eglot-report-progress nil)          ; Disable lsp server logs (Don't show lsp messages at the bottom, java)

  :config
  (fset #'jsonrpc--log-event #'ignore) ; Massive performance boost; don't log every event

  ;; LSP Servers
  (add-to-list 'eglot-server-programs
               `(java-ts-mode . ("/home/najjt/.emacs.d/share/eclipse.jdt.ls/bin/jdtls" "-configuration" "config_linux_arm" "-lsp"))))

#+end_src

*** Treesitter

Remap programming language modes to their treesitter equivalent modes.

#+begin_src emacs-lisp

(setq major-mode-remap-alist
      '((yaml-mode . yaml-ts-mode)
        (bash-mode . bash-ts-mode)
        (js2-mode . js-ts-mode)
        (typescript-mode . typescript-ts-mode)
        (json-mode . json-ts-mode)
        (css-mode . css-ts-mode)
        (java-mode . java-ts-mode)
        (python-mode . python-ts-mode)))

#+end_src

*** Completions

[[https://github.com/minad/corfu][Corfu]] enhances in-buffer completion with a small completion popup.

#+begin_src emacs-lisp

(use-package corfu
  :init
  (global-corfu-mode)
  :bind
  (:map corfu-map
        ("SPC" . corfu-insert-separator)
        ("C-n" . corfu-next)
        ("C-p" . corfu-previous)))

;; Part of corfu
(use-package corfu-popupinfo
  :after corfu
  :ensure nil
  :hook (corfu-mode . corfu-popupinfo-mode)
  :custom
  (corfu-popupinfo-delay '(0.25 . 0.1))
  (corfu-popupinfo-hide nil)
  :config
  (corfu-popupinfo-mode))

;; Make corfu popup come up in terminal overlay
(use-package corfu-terminal
  :if (not (display-graphic-p))
  :config
  (corfu-terminal-mode))

;; Nerd icons for corfu
(use-package nerd-icons-corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

;; Completion extensions
(use-package cape
  :init
  ;; chezmoi completions
  ;; (add-to-list 'completion-at-point-functions #'chezmoi-capf)
  ;; Elisp completions inside Org or Markdown code blocks
  (add-hook 'completion-at-point-functions #'cape-elisp-block))

#+end_src

*** Comments

Nice commenting functionality with [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]].

#+begin_src emacs-lisp

(use-package evil-nerd-commenter
  :defer t
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

*** Match Delimiters

Match delimiters with [[https://sr.ht/~tsdh/highlight-parentheses.el/][highlight-parentheses]] and electric-pair-mode.

#+begin_src emacs-lisp

(use-package highlight-parentheses
  :diminish
  :hook (prog-mode . (lambda ()
                       (highlight-parentheses-mode)
                       (electric-pair-mode))))

#+end_src

*** Git Interface

[[https://magit.vc/][Magit]]: a complete text-based user interface to Git.

#+begin_src emacs-lisp

(use-package magit
  :defer t
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
  :bind
  ("C-c g" . magit-status))

#+end_src

** Programming Languages Support
*** Java

Java support for eglot: [[https://github.com/yveszoundi/eglot-java][eglot-java]].

#+begin_src emacs-lisp

(use-package eglot-java)

#+end_src

*** Common File Types

#+begin_src emacs-lisp

(use-package yaml-mode)

(use-package json-mode)

(use-package markdown-mode)

(use-package prog-mode
  :ensure nil
  :mode ("\\.rasi\\'"))

#+end_src

* Productivity
** Org Mode

I organize my life with [[https://orgmode.org/][Org Mode]]. The following headers all add and modify Org Mode's functionalities.

*** Basic Configuration

#+begin_src emacs-lisp

(use-package org
  :pin nongnu
  :ensure org-contrib ; Needed for org-contacts
  :bind (("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         ("C-c l" . org-store-link))
  :config

  ;; Basic settings
  (setq org-directory "~/notes/org"
        org-default-notes-file (concat org-directory "/refile.org")
        org-todo-keywords '((sequence "TODO" "NEXT" "|" "DONE"))
        org-refile-targets (quote (("backlog.org"             :maxlevel   . 2)
                                   ("../misc/computer.org"    :maxlevel   . 1)
                                   ("../misc/inköpslista.org" :maxlevel   . 1)
                                   ("privat.org"              :maxlevel   . 2)
                                   ("studier.org"             :maxlevel   . 2)))
        org-outline-path-complete-in-steps nil ; Refile in a single go
        org-refile-use-outline-path t)         ; Show full paths for refiling

  ;; Refile between files
  ;; (for some reason I had to put this setting
  ;; here, by itself, for it to work)
  (setq org-refile-use-outline-path 'file)

  ;; Appearance
  (setq org-tags-column 0                                   ; Position tags next to heading
        org-startup-folded t
        org-blank-before-new-entry (quote ((heading . auto) ; Empty line before headings
                                           (plain-list-item . nil)))
        org-src-preserve-indentation t)                     ; Don't add unnecessary indentation

  ;; Make only first org heading be bold
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :weight bold))))
   '(org-level-2 ((t (:inherit outline-2 :weight normal))))
   '(org-level-3 ((t (:inherit outline-3 :weight normal))))
   '(org-level-4 ((t (:inherit outline-4 :weight normal))))
   '(org-level-5 ((t (:inherit outline-5 :weight normal))))
   '(org-level-6 ((t (:inherit outline-6 :weight normal))))
   '(org-level-7 ((t (:inherit outline-7 :weight normal))))
   '(org-level-8 ((t (:inherit outline-8 :weight normal))))))

;; Generate a table of contents
(use-package toc-org
  :defer t
  :hook (org-mode . toc-org-mode))

#+end_src

*** Org Agenda

[[https://orgmode.org/manual/Agenda-Views.html][Org Agenda]] is a buffer for displaying your org todo items.

**** Basic Configuration

#+begin_src emacs-lisp

(use-package org-agenda
  :ensure nil
  :after org
  :config
  (setq org-agenda-span 'day
        org-agenda-tags-column 0
        org-agenda-start-on-weekday nil
        org-agenda-skip-scheduled-if-deadline-is-shown t
        org-agenda-skip-deadline-if-done t
        org-agenda-skip-scheduled-if-done t
        org-agenda-todo-list-sublevels t
        org-element-use-cache nil              ; org element cache often produced errors, so I disabled it
        org-agenda-scheduled-leaders '("" "")  ; Hide "Scheduled" text
        org-agenda-prefix-format "  %?-12t% s" ; Hide category for agenda items

        org-agenda-files '("~/notes/org")
        ;; Add newline above date heading
        org-agenda-format-date
        (lambda (date)
          (concat "\n" (org-agenda-format-date-aligned date)))

        ;; Time grid settings
        org-agenda-time-grid
        '((daily today require-timed remove-match)
          (800 1000 1200 1400 1600 1800 2000)
          "...." "------------")
        org-agenda-current-time-string
        "← now")

  (setq org-agenda-custom-commands
        '(("d" "Day agenda"
           ((agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                         '((:name "Schedule"
                                  :time-grid t)
                           (:name "Vanor"
                                  :habit t)
                           (:name "Overdue"
                                  :deadline past
                                  :scheduled past)
                           (:name "Studier"
                                  :and (:category "studier" :scheduled today)
                                  :and (:category "studier" :deadline today))
                           (:name "Privat"
                                  :and (:category ("privat" "refile" "phone_refile" "computer") :scheduled today)
                                  :and (:category ("privat" "refile" "phone_refile" "computer") :deadline today)
                                  :category "calendar")
                           (:name "Upcoming Deadlines"
                                  :deadline future)
                           (:discard (:anything t))))))))
          ("w" "Week agenda"
           ((agenda "" ((org-agenda-span 'week)))))))

  ;; Date heading settings
  (custom-set-faces
   '(org-agenda-date ((t (:height 1.0 :weight bold :background "unspecified"))))
   '(org-agenda-date-today ((t (:height 1.3 :weight bold :background "unspecified" :underline nil))))))

#+end_src

**** Org Super Agenda

[[https://github.com/alphapapa/org-super-agenda][Org Super Agenda]] filters and groups agenda items, making for a cleaner look.

#+begin_src emacs-lisp

(use-package org-super-agenda
  :after org-agenda
  :hook (org-agenda-mode . org-super-agenda-mode))

#+end_src

*** Org Capture

[[https://orgmode.org/manual/Capture.html][Org Capture]] lets you quickly store notes.

#+begin_src emacs-lisp

(use-package org-capture
  :ensure nil
  :after org
  :config
  ;; Don't save org capture bookmarks
  (setq org-bookmark-names-plist nil
        org-capture-bookmark nil)
  :custom
  (org-capture-templates
   '(
     ("t" "Task" entry (file "")
      "* TODO %?\n  %i\n")

     ("l" "Task with link" entry (file "")
      "* TODO %?\n  %i\n %a")

     ("n" "Note" entry (file "")
      "* %?\n %i\n")

     ("e" "Calendar event" entry (file "calendar.org")
      "* %?\n %^t")

     ("c" "Contact" entry (file "")
      "* %?
          :PROPERTIES:
          :PHONE: %^{phone number}
          :ADDRESS: %^{Street name Street no., Postal Code Postal Area, Country}
          :BIRTHDAY: %^{yyyy-mm-dd}
          :EMAIL: %^{name@domain.com}
          :NOTE: %^{NOTE}
          :END:"))))

#+end_src

*** Org Contacts

Contacts in Org Mode with [[https://orgmode.org/worg/org-contrib/org-contacts.html][Org Contacts]].

#+begin_src emacs-lisp

(use-package org-contacts
  :after org
  :defer t
  :custom (org-contacts-files '("~/notes/org/contacts.org")))

#+end_src

*** Org Babel

Active code blocks in org files with [[https://orgmode.org/worg/org-contrib/babel/][Org Babel]].

#+begin_src emacs-lisp

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (java . t)))

(setq org-confirm-babel-evaluate nil)
(org-babel-tangle-file "~/.emacs.d/init.org")

;; Block templates
(setq org-structure-template-alist
      '(("l" . "src emacs-lisp")
        ("j" . "src java")
        ("s" . "src")
        ("e" . "example")
        ("q" . "quote")))

#+end_src

** Mail

[[https://www.emacswiki.org/emacs/mu4e][mu4e]] is an email client for Emacs, based on the mu email indexer/searcher.

#+begin_src emacs-lisp

(use-package mu4e
  :ensure nil
  :defer 20 ; Load 20 s after startup
  :commands (mu4e make-mu4e-context)
  :bind
  ("C-c m" . mu4e)

  (:map mu4e-view-mode-map
        ("e" . mu4e-view-save-attachment))
  :config
  (add-to-list 'gnutls-trustfiles (expand-file-name "~/.config/protonmail/bridge/cert.pem"))

  (setq mail-user-agent 'mu4e-user-agent) ; mu4e default email client
  (set-variable 'read-mail-command 'mu4e) ; mu4e default email reader

  (setq
   ;; User info
   user-mail-address "mlonna@pm.me"
   user-full-name  "Martin Lönn Andersson"

   ;; Maildir setup
   mu4e-root-maildir "~/.mail"
   mu4e-attachment-dir "~/Downloads"
   mu4e-maildir-shortcuts
   '((:maildir "/Proton/Inbox"                :key ?i)
     (:maildir "/Proton/Folders/viktigt"      :key ?v)
     (:maildir "/Proton/Folders/orders"       :key ?r)
     (:maildir "/Proton/Folders/kvitton"      :key ?k)
     (:maildir "/Proton/Folders/interrail 24" :key ?t))

   mu4e-contexts
   `(,(make-mu4e-context
       :name "mlonna"
       :match-func
       (lambda (msg)
         (when msg
           (mu4e-message-contact-field-matches msg
                                               :to "mlonna@pm.me")))
       :vars '((user-mail-address . "mlonna@pm.me" )
               (user-full-name . "Martin Lönn Andersson")
               (mu4e-drafts-folder . "/Proton/Drafts")
               (mu4e-sent-folder . "/Proton/Sent")
               (mu4e-refile-folder . "/Proton/Archive")
               (mu4e-trash-folder . "/Proton/Trash")))

     ,(make-mu4e-context
       :name "nitramla"
       :match-func
       (lambda (msg)
         (when msg
           (mu4e-message-contact-field-matches msg
                                               :to "nitramla@pm.me")))
       :vars '((user-mail-address . "nitramla@pm.me")
               (user-full-name . "Martin")
               (mu4e-drafts-folder . "/Proton/Drafts")
               (mu4e-sent-folder . "/Proton/Sent")
               (mu4e-refile-folder . "/Proton/Archive")
               (mu4e-trash-folder . "/Proton/Trash")))

     ,(make-mu4e-context
       :name "hemlg"
       :match-func
       (lambda (msg)
         (when msg
           (mu4e-message-contact-field-matches msg
                                               :to "hemlg@pm.me")))
       :vars '((user-mail-address . "hemlg@pm.me")
               (user-full-name . "Martin")
               (mu4e-drafts-folder . "/Proton/Drafts")
               (mu4e-sent-folder . "/Proton/Sent")
               (mu4e-refile-folder . "/Proton/Archive")
               (mu4e-trash-folder . "/Proton/Trash")))

     ,(make-mu4e-context
       :name "trshcan"
       :match-func
       (lambda (msg)
         (when msg
           (mu4e-message-contact-field-matches msg
                                               :to "trshcan@pm.me")))
       :vars '((user-mail-address . "trshcan@pm.me")
               (user-full-name . "Martin")
               (mu4e-drafts-folder . "/Proton/Drafts")
               (mu4e-sent-folder . "/Proton/Sent")
               (mu4e-refile-folder . "/Proton/Archive")
               (mu4e-trash-folder . "/Proton/Trash"))))

   ;; Start with the first (default) context
   mu4e-context-policy 'pick-first

   ;; Ask for context if no context matches
   mu4e-compose-context-policy 'ask

   ;; Fetch mail
   mu4e-get-mail-command "mbsync -a"
   mu4e-change-filenames-when-moving t   ; Needed for mbsync
   mu4e-update-interval 120              ; Update every 2 minutes

   ;; Send mail
   message-send-mail-function 'message-send-mail-with-sendmail
   smtpmail-auth-credentials "~/.authinfo"
   smtpmail-smtp-server "127.0.0.1"
   smtpmail-smtp-service 1025
   smtpmail-stream-type 'starttls

   ;; Other options
   mu4e-confirm-quit nil

   ;; Re-flow mail so it's not hard wrapped
   mu4e-compose-format-flowed t

   ;; Hide annoying retrieving msg in mini buffer
   mu4e-hide-index-messages t
   mu4e-index-update-error-warning 'nil))

#+end_src

** Calendar

Calendar framework with [[https://github.com/kiwanami/emacs-calfw][calfw]].

#+begin_src emacs-lisp

(use-package calfw
  :config
  ;; Use Swedish calendar
  (load "sv-kalender"))

;; Integrate calfw with org
(use-package calfw-org
  :after calfw)

(defun my/custom-open-calendar ()
  "Open calendar with two weeks view"
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-source "medium purple"))
   :view 'two-weeks))

#+end_src

** LaTeX

[[https://www.gnu.org/software/auctex/][AUCTeX]], an extensible package for writing and formatting TeX files. It supports many different TeX macro packages, including AMS-TEX, LaTeX, Texinfo, ConTEXt, and docTEX (dtx files).

*Prerequisite*: Install [[https://www.tug.org/texlive/quickinstall.html][TeX Live]].

#+begin_src emacs-lisp

(use-package tex
  :ensure auctex
  :defer t
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-master nil)
  ;; To use pdfview with auctex
  (TeX-view-program-selection '((output-pdf "PDF Tools"))
                              TeX-source-correlate-start-server t)
  (TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))

#+end_src

** PDF Tools

[[https://github.com/vedang/pdf-tools][PDF Tools]] has better PDF support than DocView.

#+begin_src emacs-lisp

(use-package pdf-tools
  :defer t
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :config
  (pdf-tools-install))

#+end_src

* Diminish

[[https://github.com/emacsmirror/diminish][Diminish]] hides minor modes from the modeline.

#+begin_src emacs-lisp

(use-package diminish
  :diminish (auto-fill-function
             visual-line-mode
             centered-window-mode
             eldoc-mode
             evil-collection-unimpaired-mode
             org-indent-mode
             abbrev-mode))

#+end_src

* Success Notification

Send a notification on successfully loading Emacs.

#+begin_src emacs-lisp

(shell-command "notify-send 'Emacs Successfully Loaded'")

#+end_src

* Tangle & Reload On Save

These hooks will ask to tangle all code blocks and reload configuration on save.

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t)
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
;; End:
